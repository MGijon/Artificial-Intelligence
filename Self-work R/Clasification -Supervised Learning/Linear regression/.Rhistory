print(summary(Datos$CV))
print(sd(Datos$CV, na.rm = TRUE))
Datos$Corcub <- scale(Datos$corcub)
print(round(mean(Datos$Corcub, na.rm = TRUE), 3) == 0)
Datos$Sdmttoco <- scale(Datos$sdmttoco)
print(round(mean(Datos$Sdmttoco , na.rm = TRUE), 3) == 0)
Datos$Lnsscore <- scale(Datos$lnsscore)
print(round(mean(Datos$Lnsscore, na.rm = TRUE), 3) == 0)
Datos$Waisvocd <- scale(Datos$waisvocd)
print(round(mean(Datos$Waisvocd , na.rm = TRUE), 3) == 0)
print(round(sd(Datos$Waisvocd , na.rm = TRUE), 3 ) == 1)
Datos$intervalos <- cut(Datos$age, breaks = c( min(Datos$age), 21, 25, max(Datos$age) ), labels = c('<= 21', '22-24', '>= 25' ))
Datos$age
Datos$intervalos
curve(dexp(x), from = 0, to = 10) # Representa la densidad de una exponencial de media 1 entre 0 y 10
x <- rbinom(20, 1, 0.5)  # Genera 20 observaciones con distribución B(1,0.5)
x
table(x) # Calcula las fecuencias absolutas de los valores generados
pnorm(3.5, mean = 3, sd = .5)
qnorm(0.7)
qnorm(0.7, sd = 0.5)
qnorm(0.955)
qnorm(0.99)
x <- rnorm(100, mean = 10, sd = 1)
x
mean(x)
sd(x)
hist(x)
boxplot(x)
hist(x, freq = FALSE)    # freq = FALSE para que el área total sea 1
curve(dnorm(x, mean = 10, sd = 1), from = 7, to = 13, add = TRUE)
text8_file = "~/text8"
videogames <- read.csv('Data/vgsales.csv', stringsAsFactors = FALSE)
library(ggplot2)
library(dplyr)
library(DT)
library(tidyr)
library(wesanderson)
videogames <- read.csv('Data/vgsales.csv', stringsAsFactors = FALSE)
videogames <- read.csv('Data/vgsales.csv', stringsAsFactors = FALSE)
videogames <- read.csv('Data/vgsales.csv', stringsAsFactors = FALSE)
videogames <- read.csv('/Data/vgsales.csv', stringsAsFactors = FALSE)
videogames <- read.csv('Data/vgsales.csv', stringsAsFactors = FALSE)
summary(videogames)
str(videogames)
head(videogames)
plot(videogames$Year, videogames$Global_Sales, main = 'Year - Global_Sales')
videogames <- read.csv('/Users/manuelgijonagudo/Documents/Programación/GIT/Machine-Learning/Kaggle/VideoGames R/vgsales.csv', stringsAsFactors = FALSE)
summary(videogames)
str(videogames)
head(videogames)
plot(videogames$Year, videogames$Global_Sales, main = 'Year - Global_Sales')
videogames <- read.csv('/Users/manuelgijonagudo/Documents/Programación/GIT/Machine-Learning/Kaggle/VideoGames R/Data/vgsales.csv', stringsAsFactors = FALSE)
summary(videogames)
str(videogames)
head(videogames)
plot(videogames$Year, videogames$Global_Sales, main = 'Year - Global_Sales')
summary(videogames)
str(videogames)
head(videogames)
summary(videogames)
videogames$Year = as.numeric(videogames$Year)
plot(videogames$Year, videogames$Global_Sales, main = 'Year - Global_Sales')
summary(videogames)
videogames = videogames[videogames$Year < 2017]
plot(videogames$Year, videogames$Global_Sales, main = 'Year - Global_Sales')
videogames = videogames[videogames$Year < 2017]
videogames = videogames[videogames$Year < 2017,]
videogames
summary(videogames)
plot(videogames$Year, videogames$Global_Sales, main = 'Year - Global_Sales')
ggplot(videogames, aes(Year, Global_Sales)) + geom_point()
videogames
ggplot(videogames, aes(Year, Global_Sales)) + geom_point(aes(colour = factor(Platform)), size = 4)
ggplot(videogames, aes(Year, Global_Sales)) + geom_point(aes(colour = factor(Platform)), size = 2)
Year_GS_Plot <- ggplot(videogames, aes(Year, Global_Sales, colour = Platform))
Year_GS_Plot <- ggplot(videogames, aes(Year, Global_Sales, colour = Platform))
+ geom_point()
+ ggtitle("Year against Global Sales")
+ labs(y = "Global Sales", x = "Year")
print(Year_GS_Plot)
Year_GS_Plot <- ggplot(videogames, aes(Year, Global_Sales, colour = Platform))
+ geom_point()
+ ggtitle("Year against Global Sales")
+ labs(y = "Global Sales", x = "Year")
print(Year_GS_Plot)
Year_GS_Plot <- ggplot(videogames, aes(Year, Global_Sales, colour = Platform))
+ geom_point()
+ ggtitle("Year against Global Sales")
+ labs(y = "Global Sales", x = "Year")
print(Year_GS_Plot)
Year_GS_Plot <- ggplot(videogames, aes(Year, Global_Sales, colour = Platform))
+ geom_point()
+ ggtitle("Year against Global Sales")
+ labs(y = "Global Sales", x = "Year")##  ????? NO FUNCIONA !!!!!
print(Year_GS_Plot)
ggplot(videogames, aes(Year, Global_Sales)) + geom_point(aes(colour = factor(Platform)), size = 2)
Year_GS_Plot <- ggplot(videogames, aes(Year, Global_Sales, colour = Platform))  + geom_point()
print(Year_GS_Plot)
print(Year_GS_Plot + ggtitle("Year against Global Sales"))
print(Year_GS_Plot  + labs(y = "Global Sales", x = "Year"))
data(iris)
head(iris)
sapply(iris, class)
library(FactorMineR)
library(FactoMineR)
rl <- lm(pc&ind&coord[, 1] ~ iris[, 5])
install.packages('FactoMineR')
library(FactoMineR)
pc <- PCA(iris, quali.sup = 5)
rl <- lm(pc&ind&coord[, 1] ~ iris[, 5])
pc <- PCA(iris, quali.sup = 5)
rl <- lm(pc&ind&coord[, 1] ~ iris[, 5])
rl <- lm(pc&ind&coord[, 1] ~ iris[, 5])
attributes(pc&quali.sup)
pc&quali.sup$eta2
rl <- lm(pc$ind$coord[, 1] ~ iris[, 5])
attributes(pc$quali.sup)
pc&quali.sup$eta2
pc$quali.sup$eta2
cor(iris[, 1:4], pc$ind$coord[, 1])
r3 <- lm(pc$ind$coord[, 1] ~ iris[, 1])
summary(r3)
cor(iris[, 1], pc$ind$coord[, 1])
2*sqrt(1/152)
library(wesanderson)
library(ggplot2)
library(dplyr)
library(DT)
library(tidyr)
library(wesanderson)
videogames <- read.csv('/Users/manuelgijonagudo/Documents/Programación/GIT/Machine-Learning/Kaggle/VideoGames R/Data/vgsales.csv', stringsAsFactors = FALSE)
summary(videogames)   # explore the data
videogames$Year = as.numeric(videogames$Year)
summary(videogames)
videogames = videogames[videogames$Year < 2017,]
summary(videogames)
plot(videogames$Year, videogames$Global_Sales, main = 'Year - Global_Sales')
ggplot(videogames, aes(Year, Global_Sales)) + geom_point()
ggplot(videogames, aes(Year, Global_Sales)) + geom_point(aes(colour = factor(Platform)), size = 2)
Year_GS_Plot <- ggplot(videogames, aes(Year, Global_Sales, colour = Platform))  + geom_point()
print(Year_GS_Plot)
print(Year_GS_Plot + ggtitle("Year against Global Sales"))  # adding title
print(Year_GS_Plot  + labs(y = "Global Sales", x = "Year")) # adding labeled axes
library(ggplot2)
library(dplyr)
library(DT)
library(tidyr)
library(wesanderson)
videogames <- read.csv('/Users/manuelgijonagudo/Documents/Programación/GIT/Machine-Learning/Kaggle/VideoGames R/Data/vgsales.csv', stringsAsFactors = FALSE)
summary(videogames)   # explore the data
videogames$Year = as.numeric(videogames$Year)
summary(videogames)
videogames = videogames[videogames$Year < 2017,]
summary(videogames)
plot(videogames$Year, videogames$Global_Sales, main = 'Year - Global_Sales')
ggplot(videogames, aes(Year, Global_Sales)) + geom_point()
ggplot(videogames, aes(Year, Global_Sales)) + geom_point(aes(colour = factor(Platform)), size = 2)
Year_GS_Plot <- ggplot(videogames, aes(Year, Global_Sales, colour = Platform))  + geom_point()
print(Year_GS_Plot)
print(Year_GS_Plot + ggtitle("Year against Global Sales"))  # adding title
print(Year_GS_Plot  + labs(y = "Global Sales", x = "Year")) # adding labeled axes
Year_GS_JS <- ggplot(videogames, aes(JP_Sales, Global_Sales, colour = Platform))  + geom_point()
print(Year_GS_JS)
print(Year_GS_JS + ggtitle("Global Sales against Japanese sales"))  # adding title
print(Year_GS_Plot  + labs(y = "Global Sales", x = "Japanese Sales")) # adding labeled axes
lot the global sales against the japanese sales
Year_GS_JS <- ggplot(videogames, aes(JP_Sales, Global_Sales, colour = Platform))  + geom_point()
print(Year_GS_JS)
print(Year_GS_JS + ggtitle("Global Sales against Japanese sales"))  # adding title
print(Year_GS_JS + labs(y = "Global Sales", x = "Japanese Sales")) # adding labeled axes
library(ggplot2)
library(dplyr)
library(DT)
library(tidyr)
library(wesanderson)
videogames <- read.csv('/Users/manuelgijonagudo/Documents/Programación/GIT/Machine-Learning/Kaggle/VideoGames R/Data/vgsales.csv', stringsAsFactors = FALSE)
summary(videogames)   # explore the data
videogames$Year = as.numeric(videogames$Year)
summary(videogames)
videogames = videogames[videogames$Year < 2017,]
summary(videogames)
plot(videogames$Year, videogames$Global_Sales, main = 'Year - Global_Sales')
ggplot(videogames, aes(Year, Global_Sales)) + geom_point()
ggplot(videogames, aes(Year, Global_Sales)) + geom_point(aes(colour = factor(Platform)), size = 2)
Year_GS_Plot <- ggplot(videogames, aes(Year, Global_Sales, colour = Platform))  + geom_point()
print(Year_GS_Plot)
print(Year_GS_Plot + ggtitle("Year against Global Sales"))  # adding title
print(Year_GS_Plot  + labs(y = "Global Sales", x = "Year")) # adding labeled axes
print(Year_GS_JS)
print(Year_GS_JS + labs(y = "Global Sales", x = "Japanese Sales")) # adding labeled axes
print(Year_GS_JS + ggtitle("Global Sales against Japanese sales"))  # adding title
Year_GS_JS <- ggplot(videogames, aes(JP_Sales, Global_Sales, colour = Platform))  + geom_point()
Year_GS_EU <- ggplot(videogames, aes(EU_Sales, Global_Sales, colour = Platform))  + geom_point()
print(Year_GS_EU)
print(Year_GS_EU + ggtitle("Global Sales against Japanese sales"))  # adding title
print(Year_GS_EU + labs(y = "Global Sales", x = "Japanese Sales")) # adding labeled axes
data(iris)
data("mtcars")
cars <- data("mtcars")
cars
cars <- data(mtcars)
cars
cars.head()
summary(cars)
load(iris)
data(iris)
data(iris)
summary(data(iris))
library(datasets)
data(iris)
summary(iris)
iris
data(iris3)
iris3
setwd("~/Documents/Programación/GIT/Machine-Learning/Self-work R/Clasification -Supervised Learning/Linear regression")
summary(iris)
library(dplyr)
names(iris)
names(iris) <- tolower(names(iris))
names(iris)
Setosa <- filter(iris, species == "virginica")
Setosa
Virginica <- filter(iris, species == "virginica")
Versicolor <- filer(iris, species == "versicolor")
Versicolor <- filter(iris, species == "versicolor")
library(ggplot2)
pairs(Setosa)
cor(Setosa)
cor(Setosa)
cor(iris)
cor(Setosa$sepal.length, Setosa$sepal.width)
cor(Setosa$petal.length, Setosa$petal.width)
ggplot(Setosa, aes(x = sepal.length, y = sepal.width)) + geom_point()
regresion <- lm(sepal.length ~ sepal.width, data = Setosa) # sepal.width in function of sepal.length
summary(regresion)
plot(Setosa$sepal.length, Setosa$sepal.width, xlab = "Sepal width", ylab = "Sepal length")
abline(regresion)
plot(Setosa$sepal.length, Setosa$sepal.width, xlab = "Sepal width", ylab = "Sepal length")
abline(regresion)
plot(Setosa$sepal.length, Setosa$sepal.width, xlab = "Sepal width", ylab = "Sepal length")
abline(regresion)
ggplot(Setosa, aes(x = sepal.length, y = sepal.width)) + geom_point()
+  geom_quantile(regresion)
plot(Setosa$sepal.length, Setosa$sepal.width, xlab = "Sepal width", ylab = "Sepal length")
abline(regresion)
abline(regresion)
abline(regresion)
abline(regresion)
abline(regresion)
abline(regresion)
abline(regresion)
abline(regresion)
plot(Setosa$sepal.length, Setosa$sepal.width, xlab = "Sepal width", ylab = "Sepal length")
abline(regresion, color = "red")
plot(Setosa$sepal.length, Setosa$sepal.width, xlab = "Sepal width", ylab = "Sepal length")
abline(regresion)
plot(Setosa$sepal.length, Setosa$sepal.width, xlab = "Sepal width", ylab = "Sepal length")
abline(regresion)
plot(Setosa$sepal.length, Setosa$sepal.width, xlab = "Sepal width", ylab = "Sepal length")
abline(regresion)
plot(Setosa$sepal.length, Setosa$sepal.width, xlab = "Sepal width", ylab = "Sepal length")
abline(regresion)
plot(Setosa$sepal.length, Setosa$sepal.width, xlab = "Sepal width", ylab = "Sepal length")
abline(regresion)
plot(Setosa$sepal.length, Setosa$sepal.width, xlab = "Sepal width", ylab = "Sepal length")
cor(Setosa$sepal.width, Setosa$sepal.length) # 0.4572278
ggplot(Setosa, aes(x = sepal.width, y = sepal.length)) + geom_point()
regresion <- lm(sepal.width ~ sepal.length, data = Setosa) # sepal.lenght in function of sepal.width
summary(regresion)
plot(Setosa$sepal.length, Setosa$sepal.width, xlab = "Sepal width", ylab = "Sepal length")
abline(regresion)
ggplot(Setosa, aes(x = sepal.width, y = sepal.length)) + geom_point()
+ geom_quantile(regresion)
+ geom_quantile(aes(regresion)
## PETAL:
## ======
cor(Setosa$petal.length, Setosa$petal.width) # 0.3221082
ggplot(Setosa, aes(x = sepal.width, y = sepal.length)) + geom_point()
+ geom_quantile(aes(regresion))
regresion$coefficients
regresion$coefficients[1]
regresion$coefficients$(Intercept)
regresion$coefficients
regresion$residuals
+ geaom_abline(aes(regresion))
+ geom_abline(aes(regresion))
regresion$coefficients
class(regresion$coefficients)
+ geom_abline(aes(intercept = regresion$coefficients[1], slope = regresion$coefficients[2]))
ggplot(Setosa, aes(x = sepal.width, y = sepal.length)) + geom_point()
+ geom_abline(aes(intercept = 1.4463054, slope = 0.2318905))
plot(Setosa$sepal.length, Setosa$sepal.width, xlab = "Sepal width", ylab = "Sepal length")
abline(regresion)
cor(Setosa$petal.width, Setosa$petal.length) # 0.3221082
cor(Setosa$petal.width, Setosa$petal.length) # 0.3221082
regresion <- lm(petal.width ~ petal.length, data = Setosa)
summary(regresion)
plot(Setosa$sepal.width, Setosa$sepal.length, xlab = "Sepal width", ylab = "Sepal length")
abline(regresion
plot(Setosa$sepal.length, Setosa$sepal.width, xlab = "Sepal width", ylab = "Sepal length")
abline(regresion)
regresion <- lm(sepal.width ~ sepal.length, data = Setosa) # sepal.lenght in function of sepal.width
summary(regresion)
plot(Setosa$sepal.length, Setosa$sepal.width, xlab = "Sepal width", ylab = "Sepal length")
abline(regresion)
plot(x = Setosa$sepal.length, y = Setosa$sepal.width, xlab = "Sepal width", ylab = "Sepal length")
abline(regresion)
plot(x = Setosa$sepal.length, y = Setosa$sepal.width, xlab = "Sepal length", ylab = "Sepal width")
abline(regresion)
regresion <- lm(petal.width ~ petal.length, data = Setosa)   # width in function of lenght
summary(regresion)
plot(x = Setosa$petal.length, Setosa, y = Setosa$petal.width, xlab = "Petal length", ylab = "Petal width")
abline(regresion)
plot(x = Setosa$petal.length, y = Setosa$petal.width, xlab = "Petal length", ylab = "Petal width")
abline(regresion)
cor(Virginica$sepal.length, Virginica$sepal.width)
regresion <- lm(sepal.width ~ sepal.length, data = Virginica)
summary(regresion)
plot(x = Virginica$sepal.length, y = Virginica$sepal.width, xlab = "Sepal length", ylab = "Sepal width")
abline(regresion
plot(x = Virginica$sepal.length, y = Virginica$sepal.width, xlab = "Sepal length", ylab = "Sepal width")
plot(x = Virginica$sepal.length, y = Virginica$sepal.width, xlab = "Sepal length", ylab = "Sepal width")
cor(Virginica$sepal.length, Virginica$sepal.width)
regresion <- lm(petal.width, petal.length, data = Virginica)
summary(regresion)
plot(x = Virginica$petal.length, y = Virginica$petal.width, xlab = "Petal lenght", ylab = "Petal width")
abline(regresion)
plot(x = Virginica$petal.length, y = Virginica$petal.width, xlab = "Petal lenght", ylab = "Petal width")
plot(Virginica$petal.length, Virginica$petal.width, xlab = "Petal lenght", ylab = "Petal width") # figure margins too large
cor(Versicolor$sepal.length, Versicolor$sepal.width)
regresion <- lm(sepal.width ~ sepal.length, data = Versicolor)
summary(regresion)
plot(x = Virginica$sepal.length, y = Virginica$sepal.width, xlab = "Sepal length", ylab = "Sepal width")
abline(regresion)
plot(x = Virginica$sepal.length, y = Virginica$sepal.width, xlab = "Sepal length", ylab = "Sepal width")
cor(Versicolor$petal.length, Versicolor$petal.width)
regresion <- lm(petal.width ~ petal.length, data = Versicolor)
summary(regresion)
plot(x = Versicolor$petal.length, y = Versicolor$petal.width, xlab = "Petal length", ylab = "Petal widht")
abline(regresion)
plot(x = Versicolor$petal.length, y = Versicolor$petal.width, xlab = "Petal length", ylab = "Petal widht")
plot(x = Setosa$sepal.length, y = Setosa$sepal.width, xlab = "Sepal length", ylab = "Sepal width")
abline(regresion)
graphics.off()
plot(x = Setosa$sepal.length, y = Setosa$sepal.width, xlab = "Sepal length", ylab = "Sepal width")
abline(regresion)
plot(x = Setosa$sepal.length, y = Setosa$sepal.width, xlab = "Sepal length", ylab = "Sepal width")
abline(regresion)
regresion <- lm(sepal.width ~ sepal.length, data = Setosa) # sepal.width in function of sepal.length
summary(regresion)
plot(x = Setosa$sepal.length, y = Setosa$sepal.width, xlab = "Sepal length", ylab = "Sepal width")
abline(regresion)
graphics.off()
plot(x = Setosa$petal.length, y = Setosa$petal.width, xlab = "Petal length", ylab = "Petal width")
abline(regresion)
regresion <- lm(petal.width ~ petal.length, data = Setosa)   # width in function of lenght
summary(regresion)
plot(x = Setosa$petal.length, y = Setosa$petal.width, xlab = "Petal length", ylab = "Petal width")
abline(regresion)
regresion <- lm(sepal.width ~ sepal.length, data = Virginica)
summary(regresion)
graphics.off()
plot(x = Virginica$sepal.length, y = Virginica$sepal.width, xlab = "Sepal length", ylab = "Sepal width") # error, margins too large!!
abline(regresion)
regresion <- lm(petal.width, petal.length, data = Virginica)
summary(regresion)
plot(x = Virginica$petal.length, y = Virginica$petal.width, xlab = "Petal lenght", ylab = "Petal width") # figure margins too large
abline(regresion)
regresion <- lm(petal.width, petal.length, data = Virginica)
summary(regresion)
plot(x = Virginica$petal.length, y = Virginica$petal.width, xlab = "Petal lenght", ylab = "Petal width") # figure margins too large
abline(regresion)
plot(x = Virginica$petal.length, y = Virginica$petal.width, xlab = "Petal lenght", ylab = "Petal width") # figure margins too large
abline(regresion)
graphics.off()
regresion <- lm(petal.width ~ petal.length, data = Virginica)
summary(regresion)
plot(x = Virginica$petal.length, y = Virginica$petal.width, xlab = "Petal lenght", ylab = "Petal width") # figure margins too large
abline(regresion)
graphics.off()
regresion <- lm(sepal.width ~ sepal.length, data = Versicolor)
summary(regresion)
plot(x = Virginica$sepal.length, y = Virginica$sepal.width, xlab = "Sepal length", ylab = "Sepal width") #figure margins too large
abline(regresion)
regresion <- lm(petal.width ~ petal.length, data = Versicolor)
summary(regresion)
plot(x = Versicolor$petal.length, y = Versicolor$petal.width, xlab = "Petal length", ylab = "Petal widht") # figure margins too large
abline(regresion)
library(datasets)
library(dplyr)
library(ggplot2)
data(iris)
Versicolor <- filter(data = iris, species == "Versicolor")
data(iris)
Versicolor <- filter(data = iris, species == "Versicolor")
Versicolor <- filter(data = iris, Species == "Versicolor")
names(iris) <- tolower(names(iris))
Versicolor <- filter(data = iris, Species == "Versicolor")
Versicolor <- filter(data = iris, species == "Versicolor")
Versicolor <- filter(data = iris, species == "Versicolor")
library(dplyr)
library(ggplot2)
data(iris)
names(iris) <- tolower(names(iris))
Versicolor <- filter(data = iris, species == "Versicolor")
names(iris)
Versicolor <- filter(data = iris, species == "Versicolor")
iris
names(iris)[3]
names(iris)[4]
names(iris)[5]
Versicolor <- filter(data = iris, names(iris)[5] == "Versicolor")
Versicolor <- filter(data = iris, species== "Versicolor")
Versicolor <- filter(iris, species == "versicolor")
Versicolor
cor(Versicolor$petal.length, Versicolor$petal.width)
regresion <- lm(petal.width ~ petal.lenth, data = Versicolor)
regresion <- lm(petal.width ~ petal.length, data = Versicolor)
summary(regresion)
plot(x = Virginica$petal.length, y = Virginica$petal.width, xlab = "Petal lenght", ylab = "Petal width", main = "Versicolor petal linear regression")
abline(regresion)
new.flowers <- data.frame(petal.length = seq(4.5, 7, 50))
predict(regresion, new.flowers)
new.flowers
new.flowers <- data.frame(petal.length = seq(4.5, 50))
new.flowers
new.flowers <- data.frame(petal.length = seq(from = 4.5, to = 7, by = .25))
new.flowers
predict(regresion, new.flowers)
confint(regresion)
confint(regresion, .9) # confidence interval choosing it
confint(regresion, .5) # confidence interval choosing it
confint(regresion, .5) # confidence interval choosing it
confint(regresion, .30) # confidence interval choosing it
confint(regresion,level = .30) # confidence interval choosing it
confint(regresion,level = .5) # confidence interval choosing it
plot(x = Virginica$petal.length, y = Virginica$petal.width, xlab = "Petal lenght", ylab = "Petal width", main = "Versicolor petal linear regression")
abline(regresion, c = 'red')
plot(x = Virginica$petal.length, y = Virginica$petal.width, xlab = "Petal lenght", ylab = "Petal width", main = "Versicolor petal linear regression")
abline(regresion, color = 'red')
plot(x = Virginica$petal.length, y = Virginica$petal.width, xlab = "Petal lenght", ylab = "Petal width", main = "Versicolor petal linear regression")
abline(regresion, col = 'red')
plot(x = Virginica$petal.length, y = Virginica$petal.width, xlab = "Petal lenght", ylab = "Petal width", main = "Versicolor petal linear regression")
abline(regresion, col = 'red')
ic <- predict(regresion, new.flowers, interval interval = "confidence")
ic <- predict(regresion, new.flowers, interval interval = "confidence")
ic <- predict(regresion, new.flowers, interval = "confidence")
lines(new.flowers$petal.length, ic[, 2], lty = 2)
lines(new.flowers$petal.length, ic[, 3], lty = 2)
ic <- predict(regresion, new.flowers, interval = "confidence")
lines(new.flowers$petal.length, ic[, 2], lty = 2, col = "green")
lines(new.flowers$petal.length, ic[, 3], lty = 2, col = "green")
lines(new.flowers$petal.length, ic[, 3], lty = 2, col = "red")
# confidence intervals
ic <- predict(regresion, new.flowers, interval = "confidence")
lines(new.flowers$petal.length, ic[, 2], lty = 2, col = "green")
lines(new.flowers$petal.length, ic[, 3], lty = 2, col = "green")
# prediction intervals
ic <- predict(regresion, nuevas.edades, interval = "prediction")
lines(new.flowers$petal.length, ic[, 2], lty = 2, col = "red")
lines(new.flowers$petal.length, ic[, 3], lty = 2, col = "red")
# confidence intervals
ic <- predict(regresion, new.flowers, interval = "confidence")
lines(new.flowers$petal.length, ic[, 2], lty = 2, col = "green")
lines(new.flowers$petal.length, ic[, 3], lty = 2, col = "green")
# prediction intervals
ic <- predict(regresion, nuevas.edades, interval = "prediction")
lines(new.flowers$petal.length, ic[, 2], lty = 2, col = "red")
lines(new.flowers$petal.length, ic[, 3], lty = 2, col = "red")
# confidence intervals
ic <- predict(regresion, new.flowers, interval = "confidence")
lines(new.flowers$petal.length, ic[, 2], lty = 2, col = "green")
lines(new.flowers$petal.length, ic[, 3], lty = 2, col = "green")
# prediction intervals
ic <- predict(regresion, nuevas.edades, interval = "prediction")
lines(new.flowers$petal.length, ic[, 2], lty = 2, col = "red")
lines(new.flowers$petal.length, ic[, 3], lty = 2, col = "red")
# confidence intervals
ic <- predict(regresion, new.flowers, interval = "confidence")
lines(new.flowers$petal.length, ic[, 2], lty = 2, col = "blue")
lines(new.flowers$petal.length, ic[, 3], lty = 2, col = "blue")
# prediction intervals
ic <- predict(regresion, nuevas.edades, interval = "prediction")
lines(new.flowers$petal.length, ic[, 2], lty = 2, col = "red")
lines(new.flowers$petal.length, ic[, 3], lty = 2, col = "red")
residuos <- rstandard(regresion)
valores.ajustados <- fitted(regresion)
plot(valores.ajustados, residuos)
qqnorm(residuos)
qqline(residuos)
residuos <- rstandard(regresion)
valores.ajustados <- fitted(regresion)
plot(x = valores.ajustados, y = residuos, xlab = "Fitted values", ylab = "Residuals")
plot(x = valores.ajustados, y = residuos, xlab = "Fitted values", ylab = "Residuals", main = "Standarized resuduals against fitted values")
qqnorm(residuos)
qqline(residuos)
cor(Versicolor$petal.length, Versicolor$petal.width) # 0.7866681
regresion <- lm(petal.width ~ petal.length, data = Versicolor)
summary(regresion)
plot(x = Virginica$petal.length, y = Virginica$petal.width, xlab = "Petal lenght", ylab = "Petal width", main = "Versicolor petal linear regression")
abline(regresion)
new.flowers <- data.frame(petal.length = seq(from = 4.5, to = 7, by = .25))
predict(regresion, new.flowers)
confint(regresion) # confidence intervals
confint(regresion,level = .5) # confidence interval choosing it
plot(x = Virginica$petal.length, y = Virginica$petal.width, xlab = "Petal lenght", ylab = "Petal width", main = "Versicolor petal linear regression")
abline(regresion, col = 'red')
ic <- predict(regresion, new.flowers, interval = "confidence")
lines(new.flowers$petal.length, ic[, 2], lty = 2, col = "blue")
lines(new.flowers$petal.length, ic[, 3], lty = 2, col = "blue")
ic <- predict(regresion, nuevas.edades, interval = "prediction")
