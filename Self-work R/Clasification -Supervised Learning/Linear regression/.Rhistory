par(mfrow=c(1,1))     # ugly way to reset 'par'
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers", col = "red")
g_range == range(0, max(Y))   # returns TRUE TRUE
plot(lunch_spend, type = "o", col = "blue", ylim = g_range, axes = FALSE, ann = FALSE)
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red")
title("Money spend in food", col.main = "red", font.main = 4)
days <- c("Mond", "Tues", "Wed", "Thu", "Fri", "Sat", "Sun")
axis(1, at = 1:length(days), lab = days)
axis(2, at = 4 * grange[2])
legth(dates)
length(dates)
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26", "2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
length(dates)
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-07-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
length(dates)
plot(dates)
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-07-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
length(dates)
time_between_dates = seq(number_dates)
number_dates = length(dates)
time_between_dates = seq(number_dates)
time_between_dates
number_dates = length(dates)
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length((time_between_dates))
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
class(dates)
number_dates = length(dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
summary(time_between_dates)
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
number_dates = length(dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
time_between_dates = seq(number_dates-1)
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
number_dates = length(dates)
time_between_dates = seq(number_dates-1)
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
summary(time_between_dates)
summary(time_between_dates[:-1])
summary(time_between_dates[,-1])
summary(time_between_dates[-1])
summary(time_between_dates)
length(time_between_dates)
summary(time_between_dates)
time_between_dates[i] = difftime(dates[i +1], dates[i])
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates)
class(dates)
number_dates = length(dates)
time_between_dates = seq(number_dates-1)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
length(time_between_dates)
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
for (i in 1:(number_dates-1){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(dates)
for (i in 1:(number_dates-1){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(dates)
for (i in 1:(number_dates-1)){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(dates)
plot(time_between_dates)
plot(time_between_dates, pch = 8)
plot(time_between_dates, pch = 8, col = 'red')
plot(time_between_dates, pch = 8, col = 'red', ylab = "Time between dates", xlab = "")
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "")
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
boxplot(time_between_dates)
hist(time_between_dates)
hist(time_between_dates, breaks = 10)
hist(time_between_dates, breaks = 20)
hist(time_between_dates, breaks = 20)
hist(time_between_dates, breaks = 20, col = "blue", border = "green")
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
time_between_dates = seq(number_dates-1)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", )
number_persons = length(persons)
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", )
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
number_persons = length(persons)
time_between_dates = seq(number_dates-1)
if (number_dates == number_persons) {
print("Los tamaños cuadran!!")
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
Relaciones = date.frame(persons, dates)
Relaciones = date.frame(persons, dates)
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
Relaciones = date.frame(persons, dates)
Relaciones = data.frame(persons, dates)
Relaciones
summary(Relaciones)
Relaciones = data.frame(persons, dates, time_between_dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
Relaciones = data.frame(persons, dates, time_between_dates)
summary(Relaciones)
str(Relaciones)
summary(Relaciones)
rownames(Relaciones) <- Relaciones$persons
rownames(Relaciones) <- Relaciones$persons
row.names(Relaciones)
Relaciones = data.frame(persons, dates, time_between_dates)
row.names(Relaciones) <- Relaciones$persons
Relaciones = data.frame(persons, dates, time_between_dates)
summary(Relaciones)
Relaciones
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03", "2017-11-10")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", "RLPA")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
number_persons = length(persons)
if (number_dates == number_persons) {
print("Los tamaños cuadran!!")
}
time_between_dates = seq(number_dates)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
Relaciones = data.frame(persons, dates, time_between_dates)
Relaciones
summary(Relaciones)
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
hist(time_between_dates, breaks = 20, col = "blue", border = "green")
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03", "2017-11-10", "2017-11-24")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
number_persons = length(persons)
if (number_dates == number_persons) {
print("Los tamaños cuadran!!")
}
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
train <- read.csv('train.csv', stringsAsFactors = FALSE)
test <- read.csv('test.csv', stringsAsFactors = FALSE)
full_model <- bind_rows(train, test)
str(full_model)
summary(full_model)
print(full_model$Name)
library(RODBC)
install.packages('RODBC')
install.packages("ImportExport")
library(ImportExport)
install.packages('RODBC')
library(RODBC)
library(ODBC)
install.packages('ODBC')
y
bd<-odbcConnectAccess("bd1.mdb")
Cannabis <- read.csv('Cannabis.csv')
XTC <- read.csv('XTC.csv')
Controles <- read.csv('Controles.csv')
head(Cannabis, 3)
head(XTC, 3)
head(Controles, 3)
XTC$id <- NULL
Cannabis$Group <- 'Cannabis'
XTC$Group <- 'XTC'
Controles$Group <- 'Control'
temporal <- rbind.data.frame(XTC, Cannabis)
Datos <- rbind(temporal, Controles)
head(Datos)
Datos$Group <- as.factor(Datos$Group)
class(Datos$Group)
library(dplyr)
library(dplyr)
arrange(Datos, Group, vol)
mosaicplot(tablaCan)(tablaCan)
mosaicplot(tablaCan)(tablaCan)
tablaCan <- table(Datos$age[which(Datos$Group == 'Cannabis')], dnn = 'Cannabis')
tablaXTC <- table(Datos$age[which(Datos$Group == 'XTC')], dnn = 'XTC')
tablaCon <- table(Datos$age[which(Datos$Group == 'Control')], dnn = 'Control')
print(tablaCan)
print(tablaCon)
Datos$CV <- Datos$Corcub + Datos$Sdmttoco + Datos$Lnsscore + Datos$Waisvocd
print(summary(Datos$CV))
print(sd(Datos$CV, na.rm = TRUE))
Datos$Corcub <- scale(Datos$corcub)
print(round(mean(Datos$Corcub, na.rm = TRUE), 3) == 0)
Datos$Sdmttoco <- scale(Datos$sdmttoco)
print(round(mean(Datos$Sdmttoco , na.rm = TRUE), 3) == 0)
Datos$Lnsscore <- scale(Datos$lnsscore)
print(round(mean(Datos$Lnsscore, na.rm = TRUE), 3) == 0)
Datos$Waisvocd <- scale(Datos$waisvocd)
print(round(mean(Datos$Waisvocd , na.rm = TRUE), 3) == 0)
print(round(sd(Datos$Waisvocd , na.rm = TRUE), 3 ) == 1)
Datos$intervalos <- cut(Datos$age, breaks = c( min(Datos$age), 21, 25, max(Datos$age) ), labels = c('<= 21', '22-24', '>= 25' ))
Datos$age
Datos$intervalos
curve(dexp(x), from = 0, to = 10) # Representa la densidad de una exponencial de media 1 entre 0 y 10
x <- rbinom(20, 1, 0.5)  # Genera 20 observaciones con distribución B(1,0.5)
x
table(x) # Calcula las fecuencias absolutas de los valores generados
pnorm(3.5, mean = 3, sd = .5)
qnorm(0.7)
qnorm(0.7, sd = 0.5)
qnorm(0.955)
qnorm(0.99)
x <- rnorm(100, mean = 10, sd = 1)
x
mean(x)
sd(x)
hist(x)
boxplot(x)
hist(x, freq = FALSE)    # freq = FALSE para que el área total sea 1
curve(dnorm(x, mean = 10, sd = 1), from = 7, to = 13, add = TRUE)
text8_file = "~/text8"
videogames <- read.csv('Data/vgsales.csv', stringsAsFactors = FALSE)
library(ggplot2)
library(dplyr)
library(DT)
library(tidyr)
library(wesanderson)
videogames <- read.csv('Data/vgsales.csv', stringsAsFactors = FALSE)
videogames <- read.csv('Data/vgsales.csv', stringsAsFactors = FALSE)
videogames <- read.csv('Data/vgsales.csv', stringsAsFactors = FALSE)
videogames <- read.csv('/Data/vgsales.csv', stringsAsFactors = FALSE)
videogames <- read.csv('Data/vgsales.csv', stringsAsFactors = FALSE)
summary(videogames)
str(videogames)
head(videogames)
plot(videogames$Year, videogames$Global_Sales, main = 'Year - Global_Sales')
videogames <- read.csv('/Users/manuelgijonagudo/Documents/Programación/GIT/Machine-Learning/Kaggle/VideoGames R/vgsales.csv', stringsAsFactors = FALSE)
summary(videogames)
str(videogames)
head(videogames)
plot(videogames$Year, videogames$Global_Sales, main = 'Year - Global_Sales')
videogames <- read.csv('/Users/manuelgijonagudo/Documents/Programación/GIT/Machine-Learning/Kaggle/VideoGames R/Data/vgsales.csv', stringsAsFactors = FALSE)
summary(videogames)
str(videogames)
head(videogames)
plot(videogames$Year, videogames$Global_Sales, main = 'Year - Global_Sales')
summary(videogames)
str(videogames)
head(videogames)
summary(videogames)
videogames$Year = as.numeric(videogames$Year)
plot(videogames$Year, videogames$Global_Sales, main = 'Year - Global_Sales')
summary(videogames)
videogames = videogames[videogames$Year < 2017]
plot(videogames$Year, videogames$Global_Sales, main = 'Year - Global_Sales')
videogames = videogames[videogames$Year < 2017]
videogames = videogames[videogames$Year < 2017,]
videogames
summary(videogames)
plot(videogames$Year, videogames$Global_Sales, main = 'Year - Global_Sales')
ggplot(videogames, aes(Year, Global_Sales)) + geom_point()
videogames
ggplot(videogames, aes(Year, Global_Sales)) + geom_point(aes(colour = factor(Platform)), size = 4)
ggplot(videogames, aes(Year, Global_Sales)) + geom_point(aes(colour = factor(Platform)), size = 2)
Year_GS_Plot <- ggplot(videogames, aes(Year, Global_Sales, colour = Platform))
Year_GS_Plot <- ggplot(videogames, aes(Year, Global_Sales, colour = Platform))
+ geom_point()
+ ggtitle("Year against Global Sales")
+ labs(y = "Global Sales", x = "Year")
print(Year_GS_Plot)
Year_GS_Plot <- ggplot(videogames, aes(Year, Global_Sales, colour = Platform))
+ geom_point()
+ ggtitle("Year against Global Sales")
+ labs(y = "Global Sales", x = "Year")
print(Year_GS_Plot)
Year_GS_Plot <- ggplot(videogames, aes(Year, Global_Sales, colour = Platform))
+ geom_point()
+ ggtitle("Year against Global Sales")
+ labs(y = "Global Sales", x = "Year")
print(Year_GS_Plot)
Year_GS_Plot <- ggplot(videogames, aes(Year, Global_Sales, colour = Platform))
+ geom_point()
+ ggtitle("Year against Global Sales")
+ labs(y = "Global Sales", x = "Year")##  ????? NO FUNCIONA !!!!!
print(Year_GS_Plot)
ggplot(videogames, aes(Year, Global_Sales)) + geom_point(aes(colour = factor(Platform)), size = 2)
Year_GS_Plot <- ggplot(videogames, aes(Year, Global_Sales, colour = Platform))  + geom_point()
print(Year_GS_Plot)
print(Year_GS_Plot + ggtitle("Year against Global Sales"))
print(Year_GS_Plot  + labs(y = "Global Sales", x = "Year"))
data(iris)
head(iris)
sapply(iris, class)
library(FactorMineR)
library(FactoMineR)
rl <- lm(pc&ind&coord[, 1] ~ iris[, 5])
install.packages('FactoMineR')
library(FactoMineR)
pc <- PCA(iris, quali.sup = 5)
rl <- lm(pc&ind&coord[, 1] ~ iris[, 5])
pc <- PCA(iris, quali.sup = 5)
rl <- lm(pc&ind&coord[, 1] ~ iris[, 5])
rl <- lm(pc&ind&coord[, 1] ~ iris[, 5])
attributes(pc&quali.sup)
pc&quali.sup$eta2
rl <- lm(pc$ind$coord[, 1] ~ iris[, 5])
attributes(pc$quali.sup)
pc&quali.sup$eta2
pc$quali.sup$eta2
cor(iris[, 1:4], pc$ind$coord[, 1])
r3 <- lm(pc$ind$coord[, 1] ~ iris[, 1])
summary(r3)
cor(iris[, 1], pc$ind$coord[, 1])
2*sqrt(1/152)
library(wesanderson)
library(ggplot2)
library(dplyr)
library(DT)
library(tidyr)
library(wesanderson)
videogames <- read.csv('/Users/manuelgijonagudo/Documents/Programación/GIT/Machine-Learning/Kaggle/VideoGames R/Data/vgsales.csv', stringsAsFactors = FALSE)
summary(videogames)   # explore the data
videogames$Year = as.numeric(videogames$Year)
summary(videogames)
videogames = videogames[videogames$Year < 2017,]
summary(videogames)
plot(videogames$Year, videogames$Global_Sales, main = 'Year - Global_Sales')
ggplot(videogames, aes(Year, Global_Sales)) + geom_point()
ggplot(videogames, aes(Year, Global_Sales)) + geom_point(aes(colour = factor(Platform)), size = 2)
Year_GS_Plot <- ggplot(videogames, aes(Year, Global_Sales, colour = Platform))  + geom_point()
print(Year_GS_Plot)
print(Year_GS_Plot + ggtitle("Year against Global Sales"))  # adding title
print(Year_GS_Plot  + labs(y = "Global Sales", x = "Year")) # adding labeled axes
library(ggplot2)
library(dplyr)
library(DT)
library(tidyr)
library(wesanderson)
videogames <- read.csv('/Users/manuelgijonagudo/Documents/Programación/GIT/Machine-Learning/Kaggle/VideoGames R/Data/vgsales.csv', stringsAsFactors = FALSE)
summary(videogames)   # explore the data
videogames$Year = as.numeric(videogames$Year)
summary(videogames)
videogames = videogames[videogames$Year < 2017,]
summary(videogames)
plot(videogames$Year, videogames$Global_Sales, main = 'Year - Global_Sales')
ggplot(videogames, aes(Year, Global_Sales)) + geom_point()
ggplot(videogames, aes(Year, Global_Sales)) + geom_point(aes(colour = factor(Platform)), size = 2)
Year_GS_Plot <- ggplot(videogames, aes(Year, Global_Sales, colour = Platform))  + geom_point()
print(Year_GS_Plot)
print(Year_GS_Plot + ggtitle("Year against Global Sales"))  # adding title
print(Year_GS_Plot  + labs(y = "Global Sales", x = "Year")) # adding labeled axes
Year_GS_JS <- ggplot(videogames, aes(JP_Sales, Global_Sales, colour = Platform))  + geom_point()
print(Year_GS_JS)
print(Year_GS_JS + ggtitle("Global Sales against Japanese sales"))  # adding title
print(Year_GS_Plot  + labs(y = "Global Sales", x = "Japanese Sales")) # adding labeled axes
lot the global sales against the japanese sales
Year_GS_JS <- ggplot(videogames, aes(JP_Sales, Global_Sales, colour = Platform))  + geom_point()
print(Year_GS_JS)
print(Year_GS_JS + ggtitle("Global Sales against Japanese sales"))  # adding title
print(Year_GS_JS + labs(y = "Global Sales", x = "Japanese Sales")) # adding labeled axes
library(ggplot2)
library(dplyr)
library(DT)
library(tidyr)
library(wesanderson)
videogames <- read.csv('/Users/manuelgijonagudo/Documents/Programación/GIT/Machine-Learning/Kaggle/VideoGames R/Data/vgsales.csv', stringsAsFactors = FALSE)
summary(videogames)   # explore the data
videogames$Year = as.numeric(videogames$Year)
summary(videogames)
videogames = videogames[videogames$Year < 2017,]
summary(videogames)
plot(videogames$Year, videogames$Global_Sales, main = 'Year - Global_Sales')
ggplot(videogames, aes(Year, Global_Sales)) + geom_point()
ggplot(videogames, aes(Year, Global_Sales)) + geom_point(aes(colour = factor(Platform)), size = 2)
Year_GS_Plot <- ggplot(videogames, aes(Year, Global_Sales, colour = Platform))  + geom_point()
print(Year_GS_Plot)
print(Year_GS_Plot + ggtitle("Year against Global Sales"))  # adding title
print(Year_GS_Plot  + labs(y = "Global Sales", x = "Year")) # adding labeled axes
print(Year_GS_JS)
print(Year_GS_JS + labs(y = "Global Sales", x = "Japanese Sales")) # adding labeled axes
print(Year_GS_JS + ggtitle("Global Sales against Japanese sales"))  # adding title
Year_GS_JS <- ggplot(videogames, aes(JP_Sales, Global_Sales, colour = Platform))  + geom_point()
Year_GS_EU <- ggplot(videogames, aes(EU_Sales, Global_Sales, colour = Platform))  + geom_point()
print(Year_GS_EU)
print(Year_GS_EU + ggtitle("Global Sales against Japanese sales"))  # adding title
print(Year_GS_EU + labs(y = "Global Sales", x = "Japanese Sales")) # adding labeled axes
setwd("~/Documents/Programación/GIT/Machine-Learning/Self-work R/Clasification -Supervised Learning/Linear regression")
