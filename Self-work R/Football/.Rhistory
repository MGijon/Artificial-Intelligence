matplot(iris[1:50, ]$Sepal.Length, type = "c", main = "Setosa Sepal Length", ylab = "", sub ="c type, lend butt", lend = "butt")
plot()
boxplot(x)
x <- c(2, 32, 3, 24, 2, 34, 2, 423, 2, 4, 2, 32, 23, 2, 342)
boxplot(x)
x <- c(2, 4, 2, 3, 4, 5, 7, 4)
boxplot(x)
boxplot(x, horizontal = TRUE)
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x, horizontal = TRUE) # make it horizontal
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x)
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x, horizontal = TRUE) # make it horizontal
boxplot(iris)
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
par(nfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
par(mfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
summary(iris)
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
par()
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
par()
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
par(mfrow=c(1,1))
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers", col = "red")
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
par(mfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
par(mfrow=c(1,1))     # ugly way to reset 'par'
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers", col = "red")
g_range == range(0, max(Y))   # returns TRUE TRUE
plot(lunch_spend, type = "o", col = "blue", ylim = g_range, axes = FALSE, ann = FALSE)
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red")
title("Money spend in food", col.main = "red", font.main = 4)
days <- c("Mond", "Tues", "Wed", "Thu", "Fri", "Sat", "Sun")
axis(1, at = 1:length(days), lab = days)
axis(2, at = 4 * grange[2])
legth(dates)
length(dates)
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26", "2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
length(dates)
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-07-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
length(dates)
plot(dates)
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-07-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
length(dates)
time_between_dates = seq(number_dates)
number_dates = length(dates)
time_between_dates = seq(number_dates)
time_between_dates
number_dates = length(dates)
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length((time_between_dates))
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
class(dates)
number_dates = length(dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
summary(time_between_dates)
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
number_dates = length(dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
time_between_dates = seq(number_dates-1)
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
number_dates = length(dates)
time_between_dates = seq(number_dates-1)
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
summary(time_between_dates)
summary(time_between_dates[:-1])
summary(time_between_dates[,-1])
summary(time_between_dates[-1])
summary(time_between_dates)
length(time_between_dates)
summary(time_between_dates)
time_between_dates[i] = difftime(dates[i +1], dates[i])
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates)
class(dates)
number_dates = length(dates)
time_between_dates = seq(number_dates-1)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
length(time_between_dates)
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
for (i in 1:(number_dates-1){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(dates)
for (i in 1:(number_dates-1){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(dates)
for (i in 1:(number_dates-1)){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(dates)
plot(time_between_dates)
plot(time_between_dates, pch = 8)
plot(time_between_dates, pch = 8, col = 'red')
plot(time_between_dates, pch = 8, col = 'red', ylab = "Time between dates", xlab = "")
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "")
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
boxplot(time_between_dates)
hist(time_between_dates)
hist(time_between_dates, breaks = 10)
hist(time_between_dates, breaks = 20)
hist(time_between_dates, breaks = 20)
hist(time_between_dates, breaks = 20, col = "blue", border = "green")
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
time_between_dates = seq(number_dates-1)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", )
number_persons = length(persons)
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", )
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
number_persons = length(persons)
time_between_dates = seq(number_dates-1)
if (number_dates == number_persons) {
print("Los tamaños cuadran!!")
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
Relaciones = date.frame(persons, dates)
Relaciones = date.frame(persons, dates)
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
Relaciones = date.frame(persons, dates)
Relaciones = data.frame(persons, dates)
Relaciones
summary(Relaciones)
Relaciones = data.frame(persons, dates, time_between_dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
Relaciones = data.frame(persons, dates, time_between_dates)
summary(Relaciones)
str(Relaciones)
summary(Relaciones)
rownames(Relaciones) <- Relaciones$persons
rownames(Relaciones) <- Relaciones$persons
row.names(Relaciones)
Relaciones = data.frame(persons, dates, time_between_dates)
row.names(Relaciones) <- Relaciones$persons
Relaciones = data.frame(persons, dates, time_between_dates)
summary(Relaciones)
Relaciones
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03", "2017-11-10")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", "RLPA")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
number_persons = length(persons)
if (number_dates == number_persons) {
print("Los tamaños cuadran!!")
}
time_between_dates = seq(number_dates)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
Relaciones = data.frame(persons, dates, time_between_dates)
Relaciones
summary(Relaciones)
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
hist(time_between_dates, breaks = 20, col = "blue", border = "green")
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03", "2017-11-10", "2017-11-24")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
number_persons = length(persons)
if (number_dates == number_persons) {
print("Los tamaños cuadran!!")
}
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
train <- read.csv('train.csv', stringsAsFactors = FALSE)
test <- read.csv('test.csv', stringsAsFactors = FALSE)
full_model <- bind_rows(train, test)
str(full_model)
summary(full_model)
print(full_model$Name)
library(RODBC)
install.packages('RODBC')
install.packages("ImportExport")
library(ImportExport)
install.packages('RODBC')
library(RODBC)
library(ODBC)
install.packages('ODBC')
y
bd<-odbcConnectAccess("bd1.mdb")
library(XML)
url17 <- "http://www.livefutbol.com/calendario/esp-primera-division-2016-2017-spieltag_2/38/"
url16 <- "http://www.livefutbol.com/calendario/esp-primera-division-2015-2016-spieltag/38/"  # from here there is a patron, let's automatize this
url15 <- "http://www.livefutbol.com/calendario/esp-primera-division-2014-2015-spieltag/38/"
liga17 <- readHTMLTable(url17, header = TRUE)[[4]]
liga16 <- readHTMLTable(url16, header = TRUE)[[4]]
liga15 <- readHTMLTable(url15, header = TRUE)[[4]]
liga15
liga15[v3 == 'Barcelona']
liga15[ 'Barcelona']
liga15[v3 == 'Barcelona']
liga15['Barcelona']
liga15['Barcelona',]
head(liga15)
liga15[1,]
for (i in 1987:2015){
url <- paste0("http://www.livefutbol.com/calendario/esp-primera-division-", toString(i), "-", toString(i + 1), "-spieltag/38/")
datos[i - 1987] <- readHTMLTable(url, header = TRUE)[[4]]
}
for (i in 1987:2015){
url <- paste0("http://www.livefutbol.com/calendario/esp-primera-division-", toString(i), "-", toString(i + 1), "-spieltag/38/")
print(url)
#datos[i - 1987] <- readHTMLTable(url, header = TRUE)[[4]]
}
liga88 <- readHTMLTable(url88, header = TRUE)[[4]]
url88 <- "http://www.livefutbol.com/calendario/esp-primera-division-1987-1988-spieltag/38/"
url88 <- "http://www.livefutbol.com/calendario/esp-primera-division-1987-1988-spieltag/38/"
liga88 <- readHTMLTable(url88, header = TRUE)[[4]]
url88 <- "http://www.livefutbol.com/calendario/esp-primera-division-1987-1988-spieltag/38/"
liga88 <- readHTMLTable(url88, header = TRUE)[[4]]
liga88
liga17$Year <- 17
liga17
liga17$Year <- 2017
liga17$Year <- 2017
liga17
head(liga17)
liga16$Year <- 2016
liga15$Year <- 2015
head(liga16)
head(liga15)
liga15[1,] # ganador de la liga
Ligas <- rbind.data.frame(liga17, liga16)
Ligas <- rbind.data.frame(Ligas, Liga15)
Ligas <- rbind.data.frame(Ligas, liga15)
Ligas
for (i in 1987:2015){
url <- paste0("http://www.livefutbol.com/calendario/esp-primera-division-", toString(i), "-", toString(i + 1), "-spieltag/38/")
datos<- readHTMLTable(url, header = TRUE)[[4]]
datos$Year <- i
Ligas <- rbind.data.frame(Ligas, datos)
}
datos
Ligas
summary(Ligas)
str(Ligas)
Ligas$Year[:]
Ligas$Year[,]
Ligas$Year
head(Ligas)
Ligas$V2
Ligas$V8
head(Ligas)
Ligas.rownames()
colnames(Ligas)
Ligas$V2 <- NULL
head(Ligas)
colnames(Ligas) <-('Rank', 'Team', 'Matches', 'Victories', 'Defeats', 'Ties', 'Goals', 'V9', 'Score')
colnames(Ligas) <- c('Rank', 'Team', 'Matches', 'Victories', 'Defeats', 'Ties', 'Goals', 'V9', 'Score')
head(Ligas)
colnames(Ligas) <- c('Rank', 'Team', 'Matches', 'Victories', 'Defeats', 'Ties', 'Goals', 'V9', 'Score', 'Year')
colnames(Ligas) <- c('Rank', 'Team', 'Matches', 'Victories', 'Defeats', 'Ties', 'Goals', 'V9', 'Score', 'Year')
head(Ligas)
str(Ligas)
Ligas$Goals[1, 15]
Ligas$Goals[1:15]
Ligas$Goals[1]
Ligas$Goals[1]
class(Ligas$Goals)
class(Ligas$Goals[1])
class(Ligas$Goals[1][1])
Ligas$Goals[1]
class(Ligas$Goals[1][1])
Ligas[where.max(Ligas$Rank)]
names(Ligas)
levels(Ligas$Goals)
setwd("~/Documents/Programación/GIT/Machine-Learning/Self-work R/Football")
save(Ligas, "LigasESP.RData")
save(Ligas, file = "LigasESP.RData")
head(Ligas)
Ligas[which(Ligas$Team == "Real Madrid")]
Ligas[which(Ligas$Team == "Real Madrid"),]
Ligas[, which(names(Ligas) == 'Goals')]
Ligas[, which(names(Ligas) == 'Goals')][0]
Ligas[, which(names(Ligas) == 'Goals')][1]
class(Ligas[, which(names(Ligas) == 'Goals')][1])
strsplit(Ligas[, which(names(Ligas) == 'Goals')][1], ":")
Ligas[, which(names(Ligas) == 'Goals')][1][1]
Ligas[, which(names(Ligas) == 'Goals')][1][1][1]
Ligas[, which(names(Ligas) == 'Goals')][1][1][1][1][1][1]
Ligas[, which(names(Ligas) == 'Goals')][1][1][1][1][1][1][1][1][1]
Ligas[, which(names(Ligas) == 'Goals')][1][1][1][1][1][1][1][1][1][1][1][1]
Ligas[, which(names(Ligas) == 'Goals')][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1]
head(Ligas)
Ligas[, which(names(Ligas) == 'Goals')][1][1]
Ligas[, which(names(Ligas) == 'Goals')][1][1][1]
Ligas[, which(names(Ligas) == 'Goals')][1][1][1][1][1][1]
Ligas[, which(names(Ligas) == 'Goals')][1][1][1][1][1][1][1][1][1]
Ligas[, which(names(Ligas) == 'Goals')][1][1][1][1][1][1][1][1][1][1][1][1]
Ligas[, which(names(Ligas) == 'Goals')][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1]
as.string(Ligas[, which(names(Ligas) == 'Goals')][1])
as.character(Ligas[, which(names(Ligas) == 'Goals')][1])
test <- as.character(Ligas[, which(names(Ligas) == 'Goals')][1])
class(test)
as.character(Ligas[, which(names(Ligas) == 'Goals')])
class(Ligas[, which(names(Ligas) == 'Goals')])
class(Ligas[, which(names(Ligas) == 'Goals')][3])
class(Ligas[, which(names(Ligas) == 'Goals')][4])
class(Ligas[, which(names(Ligas) == 'Goals')][1])
class(test)
as.character(Ligas[, which(names(Ligas) == 'Goals')])
Ligas$GPositive <- as.character(Ligas[, which(names(Ligas) == 'Goals')])
class(Ligas$GPositive)
head(Ligas)
Ligas$GNegative <- Ligas$GPositive
head(Ligas)
Ligas$GPositive[1]
Ligas$GPositive[1].split(":")
Ligas$GPositive[1].split(":")
strsplit(Ligas$GPositive[1], ':')
strsplit(Ligas$GPositive[1], ':')[1]
strsplit(Ligas$GPositive[1], ':')[1][1]
class(strsplit(Ligas$GPositive[1], ':'))
length(strsplit(Ligas$GPositive[1], ':'))
class(strsplit(Ligas$GPositive[1], ':')[1])
unique(strsplit(Ligas$GPositive[1], ':'))
unique(strsplit(Ligas$GPositive[1], ':'))[1]
unique(strsplit(Ligas$GPositive[1], ':'))[2]
unique(strsplit(Ligas$GPositive[1], ':'))
test <- unique(strsplit(Ligas$GPositive[1], ':'))[[1]]
test
length(test)
Ligas$Goals[1]
class(Ligas$Goals[1][1])
test[1]
test[2]
GPositive <- unique(strsplit(Ligas$GPositive[1], ':'))[[1]]
GPositive <- GPositive[1]
Ligas$GPositive <- GPositive
temporal <- unique(strsplit(Ligas$GPositive[1], ':'))[[1]]
Ligas$GPositive <- temporal[1]
Ligas$GNegative <- temporal[2]
head(Ligas)
test <- unique(strsplit(Ligas$GPositive[1], ':'))[[1]]
test
length(test)
test[1]
test[2]
test[2]
test <- unique(strsplit(Ligas$GPositive[1], ':'))[[1]]
test
test <- unique(strsplit(Ligas$GPositive[1], ':'))[[2]]
test
length(test)
test[2]
temporal <- unique(strsplit(Ligas$GPositive[1], ':'))[[1]]
Ligas$GPositive <- temporal[1]
class(Ligas$GPositive)
head(Ligas)
Ligas$GNegative <- Ligas$GPositive
head(Ligas)
Ligas$GPositive[1].split(":")
Ligas$GPositive[1].split(":")
Ligas$GNegative <- temporal[2]
Ligas$GPositive <- temporal[1]
Ligas$GNegative <- temporal[2]
head(Ligas)
save(Ligas, file = "LigasESP.RData")
save(Ligas, file = "LigasESP.RData")
