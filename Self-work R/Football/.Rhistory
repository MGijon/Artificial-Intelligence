matplot(x, y, type = 'o', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black", lend = lends)
lends <- c("round","butt","square")
matplot(x, y, type = 'c', col = "black", lend = lends)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o', col = "black")
lends <- c("round","butt","square")
matplot(x, y, type = 'c', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black")
matplot(x, y, type = 'c', col = "black")
matplot(x, y, type = 'l', col = "black")
matplot(x, y, type = 'l', col = c("black", "red"))
data("iris")
matplot(iris)
summary(iris)
matplot(iris$Sepal.Length, main = "Sepal Length")
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length)
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa"
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa"
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, style = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, style = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, type = "p", main = "Setosa Sepal Length", ylab = "", sub ="p type")
matplot(iris[1:50, ]$Sepal.Length, type = "n", main = "Setosa Sepal Length", ylab = "", sub ="o type")
matplot(iris[1:50, ]$Sepal.Length, type = "b", main = "Setosa Sepal Length", ylab = "", sub ="o type")
matplot(iris[1:50, ]$Sepal.Length, type = "b", main = "Setosa Sepal Length", ylab = "", sub ="b type")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend round", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "c", main = "Setosa Sepal Length", ylab = "", sub ="c type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "c", main = "Setosa Sepal Length", ylab = "", sub ="c type, lend butt", lend = "butt")
plot()
boxplot(x)
x <- c(2, 32, 3, 24, 2, 34, 2, 423, 2, 4, 2, 32, 23, 2, 342)
boxplot(x)
x <- c(2, 4, 2, 3, 4, 5, 7, 4)
boxplot(x)
boxplot(x, horizontal = TRUE)
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x, horizontal = TRUE) # make it horizontal
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x)
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x, horizontal = TRUE) # make it horizontal
boxplot(iris)
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
par(nfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
par(mfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
summary(iris)
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
par()
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
par()
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
par(mfrow=c(1,1))
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers", col = "red")
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
par(mfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
par(mfrow=c(1,1))     # ugly way to reset 'par'
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers", col = "red")
g_range == range(0, max(Y))   # returns TRUE TRUE
plot(lunch_spend, type = "o", col = "blue", ylim = g_range, axes = FALSE, ann = FALSE)
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red")
title("Money spend in food", col.main = "red", font.main = 4)
days <- c("Mond", "Tues", "Wed", "Thu", "Fri", "Sat", "Sun")
axis(1, at = 1:length(days), lab = days)
axis(2, at = 4 * grange[2])
legth(dates)
length(dates)
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26", "2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
length(dates)
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-07-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
length(dates)
plot(dates)
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-07-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
length(dates)
time_between_dates = seq(number_dates)
number_dates = length(dates)
time_between_dates = seq(number_dates)
time_between_dates
number_dates = length(dates)
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length((time_between_dates))
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
class(dates)
number_dates = length(dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
summary(time_between_dates)
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
number_dates = length(dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
time_between_dates = seq(number_dates-1)
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
number_dates = length(dates)
time_between_dates = seq(number_dates-1)
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
summary(time_between_dates)
summary(time_between_dates[:-1])
summary(time_between_dates[,-1])
summary(time_between_dates[-1])
summary(time_between_dates)
length(time_between_dates)
summary(time_between_dates)
time_between_dates[i] = difftime(dates[i +1], dates[i])
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates)
class(dates)
number_dates = length(dates)
time_between_dates = seq(number_dates-1)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
length(time_between_dates)
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
for (i in 1:(number_dates-1){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(dates)
for (i in 1:(number_dates-1){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(dates)
for (i in 1:(number_dates-1)){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(dates)
plot(time_between_dates)
plot(time_between_dates, pch = 8)
plot(time_between_dates, pch = 8, col = 'red')
plot(time_between_dates, pch = 8, col = 'red', ylab = "Time between dates", xlab = "")
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "")
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
boxplot(time_between_dates)
hist(time_between_dates)
hist(time_between_dates, breaks = 10)
hist(time_between_dates, breaks = 20)
hist(time_between_dates, breaks = 20)
hist(time_between_dates, breaks = 20, col = "blue", border = "green")
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
time_between_dates = seq(number_dates-1)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", )
number_persons = length(persons)
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", )
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
number_persons = length(persons)
time_between_dates = seq(number_dates-1)
if (number_dates == number_persons) {
print("Los tamaños cuadran!!")
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
Relaciones = date.frame(persons, dates)
Relaciones = date.frame(persons, dates)
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
Relaciones = date.frame(persons, dates)
Relaciones = data.frame(persons, dates)
Relaciones
summary(Relaciones)
Relaciones = data.frame(persons, dates, time_between_dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
Relaciones = data.frame(persons, dates, time_between_dates)
summary(Relaciones)
str(Relaciones)
summary(Relaciones)
rownames(Relaciones) <- Relaciones$persons
rownames(Relaciones) <- Relaciones$persons
row.names(Relaciones)
Relaciones = data.frame(persons, dates, time_between_dates)
row.names(Relaciones) <- Relaciones$persons
Relaciones = data.frame(persons, dates, time_between_dates)
summary(Relaciones)
Relaciones
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03", "2017-11-10")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", "RLPA")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
number_persons = length(persons)
if (number_dates == number_persons) {
print("Los tamaños cuadran!!")
}
time_between_dates = seq(number_dates)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
Relaciones = data.frame(persons, dates, time_between_dates)
Relaciones
summary(Relaciones)
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
hist(time_between_dates, breaks = 20, col = "blue", border = "green")
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03", "2017-11-10", "2017-11-24")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
number_persons = length(persons)
if (number_dates == number_persons) {
print("Los tamaños cuadran!!")
}
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
train <- read.csv('train.csv', stringsAsFactors = FALSE)
test <- read.csv('test.csv', stringsAsFactors = FALSE)
full_model <- bind_rows(train, test)
str(full_model)
summary(full_model)
print(full_model$Name)
library(RODBC)
install.packages('RODBC')
install.packages("ImportExport")
library(ImportExport)
install.packages('RODBC')
library(RODBC)
library(ODBC)
install.packages('ODBC')
y
bd<-odbcConnectAccess("bd1.mdb")
setwd("~/Documents/Programación/GIT/Learning-R/Graphics/ggplot2")
# library
library(ggplot2)
# The mtcars dataset is proposed in R
head(mpg)
# geom_boxplot proposes several arguments to custom appearance
ggplot(mpg, aes(x = class, y = hwy)) + geom_boxplot(
# custom boxes
color = "blue",
fill = "blue",
alpha = 0.2,
# Notch?
notch = TRUE,
notchwidth = 0.8,
# custom outliers
outlier.colour = "red",
outlier.fill = "red",
outlier.size = 3
)
# library
library(ggplot2)
# The mtcars dataset is proposed in R
head(mtcars)
# A really basic boxplot.
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg)) +
geom_boxplot(fill = "slateblue", alpha = 0.2) +
xlab("cyl")
# source : https://www.r-graph-gallery.com/262-basic-boxplot-with-ggplot2/
# library
library(ggplot2)
# The mtcars dataset is proposed in R
head(mpg)
# Set a unique color with fill, colour, and alpha
ggplot(mpg, aes(x = class, y = hwy)) +
geom_boxplot(color = "red", fill = "orange", alpha = 0.2)
# Set a different color for each group
ggplot(mpg, aes(x = class, y = hwy, fill = class)) +
geom_boxplot(alpha = 0.3) +
theme(legend.position = "none")
# source : https://www.r-graph-gallery.com/264-control-ggplot2-boxplot-colors/
# library
library(ggplot2)
# create data
names = c(rep("A", 20) , rep("B", 5) , rep("C", 30), rep("D", 100))
value = c( sample(2:5, 20 , replace = T) , sample(4:10, 5 , replace = T), sample(1:7, 30 , replace = T),
sample(3:8, 100 , replace = T) )
data = data.frame(names,value)
# prepare a special xlab with the number of obs for each group
my_xlab <- paste(levels(data$names),"\n(N=",table(data$names), ")",sep = "")
# plot
ggplot(data, aes(x = names, y = value, fill = names)) +
geom_boxplot(varwidth = TRUE, alpha = 0.2) +
theme(legend.position = "none") +
scale_x_discrete(labels = my_xlab)
# library
library(ggplot2)
# The mtcars dataset is proposed in R
head(mpg)
# geom_boxplot proposes several arguments to custom appearance
ggplot(mpg, aes(x = reorder(class, hwy), y = hwy, fill = class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position = "none")
library(ggplot2)
# create data
names = c(rep("A", 20) , rep("B", 8) , rep("C", 30), rep("D", 80))
value = c( sample(2:5, 20 , replace = T) , sample(4:10, 8 , replace = T), sample(1:7, 30 , replace = T), sample(3:8, 80 , replace = T) )
data = data.frame(names,value)
# plot
ggplot(data, aes(x = names, y = value, fill = names)) +
geom_boxplot(alpha = 0.4) +
stat_summary(fun.y = mean, geom = "point", shape = 20, size = 10, color = "red", fill = "red") +
theme(legend.position = "none") +
scale_fill_brewer(palette = "Set3")
plot2 library
library(ggplot2)
# Data
names = c(rep("A", 80) , rep("B", 50) , rep("C", 70))
value = c( sample(2:5, 80 , replace = T) , sample(4:10, 50 , replace = T),
sample(1:7, 70 , replace = T) )
data = data.frame(names,value)
#Graph
qplot( x = names , y = value , data = data , geom = c("boxplot","jitter") , fill = names)
# library
library(ggplot2)
# create a data frame
variety = rep(LETTERS[1:7], each=40)
treatment = rep(c("high","low"),each = 20)
note = seq(1:280)+sample(1:150, 280, replace = T)
data = data.frame(variety, treatment ,  note)
# grouped boxplot
ggplot(data, aes(x = variety, y = note, fill = treatment)) +
geom_boxplot()
# source : https://www.r-graph-gallery.com/265-grouped-boxplot-with-ggplot2/
# library
library(ggplot2)
# create a data frame
variety = rep(LETTERS[1:7], each=40)
treatment = rep(c("high","low"),each = 20)
note = seq(1:280)+sample(1:150, 280, replace = T)
data = data.frame(variety, treatment ,  note)
# One box per treatment
ggplot(data, aes(x=variety, y=note, fill=treatment)) +
geom_boxplot() +
facet_wrap(~treatment)
# one box per variety
ggplot(data, aes(x=variety, y=note, fill=treatment)) +
geom_boxplot() +
facet_wrap(~variety, scale="free")
# library
library(ggplot2)
# The mtcars dataset is proposed in R
head(mpg)
# plot
ggplot(diamonds, aes(x = carat, y = price)) +
geom_boxplot(fill = "skyblue", aes(group = cut_width(carat, 0.5)))
setwd("~/Documents/Programación/GIT/Machine-Learning/Self-work R/Football")
library(XML)
url17 <- "http://www.livefutbol.com/calendario/esp-primera-division-2016-2017-spieltag_2/38/"
url16 <- "http://www.livefutbol.com/calendario/esp-primera-division-2015-2016-spieltag/38/"  # from here there is a patron, let's automatize this
url15 <- "http://www.livefutbol.com/calendario/esp-primera-division-2014-2015-spieltag/38/"
liga17 <- readHTMLTable(url17, header = TRUE)[[4]]
liga16 <- readHTMLTable(url16, header = TRUE)[[4]]
liga15 <- readHTMLTable(url15, header = TRUE)[[4]]
head(liga15)
datos <- c(1:29)
liga15
datos <- c(1:29)
for (i in 1987:2015){
url <- paste0("http://www.livefutbol.com/calendario/esp-primera-division-", toString(i), "-", toString(i + 1), "-spieltag/38/")
datos[i - 1987] <- readHTMLTable(url, header = TRUE)[[4]]
}
datos[1]
datos[3]
for (i in 1987:2015){
url <- paste0("http://www.livefutbol.com/calendario/esp-primera-division-", toString(i), "-", toString(i + 1), "-spieltag/38/")
datos[i - 1987] <- readHTMLTable(url, header = TRUE)[[4]]
}
datos[1]
datos[3]
